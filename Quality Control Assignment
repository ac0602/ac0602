import os
import numpy as n
import pandas as pd
import matplotlib.pyplot as plt

from tabulate import tabulate
from scipy.stats import beta
#load example datas
ex_data1 = pd.read_csv ('9.1.csv')

d2 = [0, 0, 1.128, 1.693, 2.059, 2.326, 2.534, 2.704, 2.847, 2.970, 3.078]
ex_data1
x1
0	1045
1	1055
2	1037
3	1064
4	1095
5	1008
6	1050
7	1087
8	1125
9	1146
10	1139
11	1169
12	1151
13	1128
14	1238
15	1125
16	1163
17	1188
18	1146
19	1167
def tabular_cusum(data, h: int = 5, target: int = None, std : int = None):

    period = np.reshape(np.arange(data.shape[0]) + 1, (data.shape[0], 1))
    data = np.reshape(np.array(data), (data.shape[0], 1))

    if target is None:
        target = np.mean(data)

    if std is None:
        rbar = []
        for i in range(data.shape[0] - 1):
            rbar.append(abs(data[i] - data[i + 1]))

        std = np.mean(rbar) / d2[2]

    K = std / 2
    H = std * h
    LCL = - H
    UCL = H
    center = 0

    c_plus = np.zeros((data.shape[0], 1))
    c_minus = np.zeros((data.shape[0], 1))
    count_p = np.zeros((data.shape[0], 1))
    count_m = np.zeros((data.shape[0], 1))

    for i in range(data.shape[0] - 1):
        c_plus[(i+1)] = max(0, (data[i+1] - (target + K) + c_plus[i]))
        c_minus[(i+1)] = min(0, (data[i+1] - (target - K) + c_plus[i]))

        if c_plus[i+1] > 0:
            count_p[i+1] = count_p[i] + 1

        else:
            count_p[i+1] = 0

        if c_minus[i+1] < 0:
            count_m[i+1] = count_m[i] + 1

        else:
            count_m[i+1] = 0

    tabular_CUSUM = np.hstack((period, data, c_plus, count_p, c_minus, count_m))
    print(tabulate(tabular_CUSUM, headers=['Period', 'input', 'C_Plus', 'N_Plus', 'C_Minus', 'N_Minus']))
    print(f'K = {K} & H = {H}')

    return c_plus, c_minus, LCL, UCL, center, count_p, count_m
c_plus, c_minus, LCL, UCL, center, count_p, count_m = tabular_cusum(ex_data1['x1'], target=1050, std=25)
  Period    input    C_Plus    N_Plus    C_Minus    N_Minus
--------  -------  --------  --------  ---------  ---------
       1     1045       0           0        0            0
       2     1055       0           0        0            0
       3     1037       0           0       -0.5          1
       4     1064       1.5         1        0            0
       5     1095      34           2        0            0
       6     1008       0           0        0            0
       7     1050       0           0        0            0
       8     1087      24.5         1        0            0
       9     1125      87           2        0            0
      10     1146     170.5         3        0            0
      11     1139     247           4        0            0
      12     1169     353.5         5        0            0
      13     1151     442           6        0            0
      14     1128     507.5         7        0            0
      15     1238     683           8        0            0
      16     1125     745.5         9        0            0
      17     1163     846          10        0            0
      18     1188     971.5        11        0            0
      19     1146    1055          12        0            0
      20     1167    1159.5        13        0            0
K = 12.5 & H = 125
plt.plot(c_plus, marker='o', color='r', label='C+')
plt.plot(c_minus, marker='o', color='b', label='C-')
plt.axhline(UCL, color='r', label='UCL', linestyle='--')
plt.axhline(center, color='black', label ='Center')
plt.axhline(LCL, color = 'b', label='LCL', linestyle='--')
plt.legend()
plt.title('Tabular CUSUM Control Chart')
plt.xlabel('Sample Number')
plt.show()

 
 
 
for period, c_p in zip(np.arange(ex_data1['x1'].shape[0] + 1), c_plus):
    if c_p > UCL:
        print(f'First "out of control" at period {period}')
        break
        
First "out of control" at period 9
import os
import numpy as n
import pandas as pd
import matplotlib.pyplot as plt

from tabulate import tabulate
from scipy.stats import beta
#load example datas
ex_data1 = pd.read_csv ('9.4.csv')
ex_data1
x1
0	8.00
1	8.01
2	8.02
3	8.01
4	8.00
5	8.01
6	8.06
7	8.07
8	8.01
9	8.04
10	8.02
11	8.01
12	8.05
13	8.04
14	8.03
15	8.05
16	8.06
17	8.04
18	8.05
19	8.06
20	8.04
21	8.02
22	8.03
23	8.05
def tabular_cusum(data, h: int = 4.77, target: int = None, std : int = None):

    period = np.reshape(np.arange(data.shape[0]) + 1, (data.shape[0], 1))
    data = np.reshape(np.array(data), (data.shape[0], 1))

    if target is None:
        target = np.mean(data)

    if std is None:
        rbar = []
        for i in range(data.shape[0] - 1):
            rbar.append(abs(data[i] - data[i + 1]))

        std = np.mean(rbar) / d2[2]

    K = std / 2
    H = std * h
    LCL = - H
    UCL = H
    center = 0

    c_plus = np.zeros((data.shape[0], 1))
    c_minus = np.zeros((data.shape[0], 1))
    count_p = np.zeros((data.shape[0], 1))
    count_m = np.zeros((data.shape[0], 1))

    for i in range(data.shape[0] - 1):
        c_plus[(i+1)] = max(0, (data[i+1] - (target + K) + c_plus[i]))
        c_minus[(i+1)] = min(0, (data[i+1] - (target - K) + c_plus[i]))

        if c_plus[i+1] > 0:
            count_p[i+1] = count_p[i] + 1

        else:
            count_p[i+1] = 0

        if c_minus[i+1] < 0:
            count_m[i+1] = count_m[i] + 1

        else:
            count_m[i+1] = 0

    tabular_CUSUM = np.hstack((period, data, c_plus, count_p, c_minus, count_m))
    print(tabulate(tabular_CUSUM, headers=['Period', 'input', 'C_Plus', 'N_Plus', 'C_Minus', 'N_Minus']))
    print(f'K = {K} & H = {H}')

    return c_plus, c_minus, LCL, UCL, center, count_p, count_m
c_plus, c_minus, LCL, UCL, center, count_p, count_m = tabular_cusum(ex_data1['x1'], target=8.02, std=0.05)
  Period    input    C_Plus    N_Plus    C_Minus    N_Minus
--------  -------  --------  --------  ---------  ---------
       1     8        0             0          0          0
       2     8.01     0             0          0          0
       3     8.02     0             0          0          0
       4     8.01     0             0          0          0
       5     8        0             0          0          0
       6     8.01     0             0          0          0
       7     8.06     0.015         1          0          0
       8     8.07     0.04          2          0          0
       9     8.01     0.005         3          0          0
      10     8.04     0             0          0          0
      11     8.02     0             0          0          0
      12     8.01     0             0          0          0
      13     8.05     0.005         1          0          0
      14     8.04     0             0          0          0
      15     8.03     0             0          0          0
      16     8.05     0.005         1          0          0
      17     8.06     0.02          2          0          0
      18     8.04     0.015         3          0          0
      19     8.05     0.02          4          0          0
      20     8.06     0.035         5          0          0
      21     8.04     0.03          6          0          0
      22     8.02     0.005         7          0          0
      23     8.03     0             0          0          0
      24     8.05     0.005         1          0          0
K = 0.025 & H = 0.2385
plt.plot(c_plus, marker='o', color='r', label='C+')
plt.plot(c_minus, marker='o', color='b', label='C-')
plt.axhline(UCL, color='r', label='UCL', linestyle='--')
plt.axhline(center, color='black', label ='Center')
plt.axhline(LCL, color = 'b', label='LCL', linestyle='--')
plt.legend()
plt.title('Tabular CUSUM Control Chart')
plt.xlabel('Sample Number')
plt.show()

for period, c_p in zip(np.arange(ex_data1['x1'].shape[0] + 1), c_plus):
    if c_p > UCL:
        print(f'First "out of control" at period {period}')
        break
        
ex_data1 = pd.read_csv ('9.1.csv')
ex_data1
x1
0	1045
1	1055
2	1037
3	1064
4	1095
5	1008
6	1050
7	1087
8	1125
9	1146
10	1139
11	1169
12	1151
13	1128
14	1238
15	1125
16	1163
17	1188
18	1146
19	1167
def EWMA(data, target: int = 1050, std : int = None, rate: float = None, width: float = None):

    period = np.reshape(np.arange(data.shape[0]) + 1, (data.shape[0], 1))
    data = np.reshape(np.array(data), (data.shape[0], 1))

    if target is None:
        target = np.mean(data)

    if std is None:
        rbar = []
        for i in range(data.shape[0] - 1):
            rbar.append(abs(data[i] - data[i + 1]))

        std = np.mean(rbar) / d2[2]

    z = np.zeros((data.shape[0]+1, 1))
    EWMA_UCL = np.zeros((data.shape[0]+1, 1))
    EWMA_LCL = np.zeros((data.shape[0]+1, 1))
    z[0] = target

    for i in range(1, data.shape[0] + 1):
        z[i] = rate * data[i-1] + (1-rate) * z[i-1]

    for i in range(data.shape[0] + 1):
        EWMA_UCL[i] = target + width * std * np.sqrt(rate/(2-rate) * (1-np.power(1-rate, 2*i)))
        EWMA_LCL[i] = target - width * std * np.sqrt(rate/(2-rate) * (1-np.power(1-rate, 2*i)))

    print(f'Rate = {rate} & Width = {width}')

    print('EWMA Statistics Table')
    tabular_EWMA = np.hstack((period, data, z[1:], EWMA_UCL[1:], EWMA_LCL[1:]))
    print(tabulate(tabular_EWMA, headers = ['Period', 'input', 'Z_value', 'UCL', 'LCL]']))

    return z, EWMA_UCL, EWMA_LCL, target
z, EWMA_UCL, EWMA_LCL, target = EWMA(ex_data1['x1'], std=25, rate = 0.1, width = 2.7)
Rate = 0.1 & Width = 2.7
EWMA Statistics Table
  Period    input    Z_value      UCL     LCL]
--------  -------  ---------  -------  -------
       1     1045    1049.5   1056.75  1043.25
       2     1055    1050.05  1059.08  1040.92
       3     1037    1048.75  1060.6   1039.4
       4     1064    1050.27  1061.69  1038.31
       5     1095    1054.74  1062.5   1037.5
       6     1008    1050.07  1063.12  1036.88
       7     1050    1050.06  1063.6   1036.4
       8     1087    1053.76  1063.98  1036.02
       9     1125    1060.88  1064.28  1035.72
      10     1146    1069.39  1064.51  1035.49
      11     1139    1076.35  1064.7   1035.3
      12     1169    1085.62  1064.86  1035.14
      13     1151    1092.16  1064.98  1035.02
      14     1128    1095.74  1065.07  1034.93
      15     1238    1109.97  1065.15  1034.85
      16     1125    1111.47  1065.22  1034.78
      17     1163    1116.62  1065.27  1034.73
      18     1188    1123.76  1065.31  1034.69
      19     1146    1125.98  1065.34  1034.66
      20     1167    1130.09  1065.37  1034.63
plt.plot(z[1:], marker='o', color='r' )
plt.plot(EWMA_UCL[1:], color='b', label='EWMA_UCL')
plt.plot(EWMA_LCL[1:], color='g', label='EWMA_LCL')
plt.axhline(target, color='black', label ='CL')
plt.legend()
plt.title('EWMA Control Chart')
plt.xlabel('Observation')
plt.ylabel('EWMA')
plt.show()

for period, z_, ucl in zip(np.arange(ex_data1['x1'].shape[0] + 1)[1:], z[1:], EWMA_UCL[1:]):
    if z_ > ucl :
        print(f'First "out of control" at period {period}')
        break
First "out of control" at period 10
ex_data1 = pd.read_csv ('30.csv')
ex_data1
x1
0	953
1	945
2	972
3	945
4	975
...	...
75	970
76	933
77	960
78	934
79	927
80 rows × 1 columns

def EWMA(data, target: int = None, std : int = None, rate: float = None, width: float = None):

    period = np.reshape(np.arange(data.shape[0]) + 1, (data.shape[0], 1))
    data = np.reshape(np.array(data), (data.shape[0], 1))

    if target is None:
        target = np.mean(data)

    if std is None:
        rbar = []
        for i in range(data.shape[0] - 1):
            rbar.append(abs(data[i] - data[i+1]))

        std = np.mean(rbar) / d2[2]

    z = np.zeros((data.shape[0]+1, 1))
    EWMA_UCL = np.zeros((data.shape[0]+1, 1))
    EWMA_LCL = np.zeros((data.shape[0]+1, 1))

    z[0] = target

    for i in range(1, data.shape[0] + 1):
        z[i] = rate * data[i-1] + (1-rate) * z[i-1]

    for i in range(data.shape[0] + 1):
        EWMA_UCL[i] = target + width * std * np.sqrt(rate/(2-rate) * (1-np.power(1-rate, 2*i)))
        EWMA_LCL[i] = target - width * std * np.sqrt(rate/(2-rate) * (1-np.power(1-rate, 2*i)))

    print(f'Rate = {rate} & Width = {width}')

    print('EWMA Statistics Table')
    tabular_EWMA = np.hstack((period, data, z[1:], EWMA_UCL[1:], EWMA_LCL[1:]))
    print(tabulate(tabular_EWMA, headers = ['Period', 'input', 'Z_value', 'UCL', 'LCL]']))

    return z, EWMA_UCL, EWMA_LCL, target
z, EWMA_UCL, EWMA_LCL, target = EWMA(ex_data1['x1'], rate=0.1, width=2.7, target=950)
Rate = 0.1 & Width = 2.7
EWMA Statistics Table
  Period    input    Z_value      UCL     LCL]
--------  -------  ---------  -------  -------
       1      953    950.3    953.284  946.716
       2      945    949.77   954.419  945.581
       3      972    951.993  955.158  944.842
       4      945    951.294  955.686  944.314
       5      975    953.664  956.081  943.919
       6      970    955.298  956.383  943.617
       7      959    955.668  956.617  943.383
       8      973    957.401  956.801  943.199
       9      940    955.661  956.946  943.054
      10      936    953.695  957.062  942.938
      11      985    956.826  957.154  942.846
      12      973    958.443  957.228  942.772
      13      955    958.099  957.287  942.713
      14      950    957.289  957.335  942.665
      15      948    956.36   957.374  942.626
      16      957    956.424  957.404  942.596
      17      940    954.782  957.429  942.571
      18      933    952.603  957.45   942.55
      19      965    953.843  957.466  942.534
      20      973    955.759  957.479  942.521
      21      949    955.083  957.49   942.51
      22      941    953.675  957.498  942.502
      23      966    954.907  957.505  942.495
      24      966    956.016  957.511  942.489
      25      934    953.815  957.516  942.484
      26      937    952.133  957.519  942.481
      27      946    951.52   957.522  942.478
      28      952    951.568  957.525  942.475
      29      935    949.911  957.527  942.473
      30      941    949.02   957.528  942.472
      31      937    947.818  957.529  942.471
      32      946    947.636  957.531  942.469
      33      954    948.273  957.531  942.469
      34      935    946.945  957.532  942.468
      35      941    946.351  957.533  942.467
      36      933    945.016  957.533  942.467
      37      960    946.514  957.533  942.467
      38      968    948.663  957.534  942.466
      39      959    949.696  957.534  942.466
      40      956    950.327  957.534  942.466
      41      959    951.194  957.534  942.466
      42      939    949.975  957.534  942.466
      43      948    949.777  957.535  942.465
      44      958    950.6    957.535  942.465
      45      963    951.84   957.535  942.465
      46      973    953.956  957.535  942.465
      47      949    953.46   957.535  942.465
      48      942    952.314  957.535  942.465
      49      965    953.583  957.535  942.465
      50      962    954.424  957.535  942.465
      51      948    953.782  957.535  942.465
      52      937    952.104  957.535  942.465
      53      955    952.393  957.535  942.465
      54      927    949.854  957.535  942.465
      55      940    948.869  957.535  942.465
      56      962    950.182  957.535  942.465
      57      963    951.464  957.535  942.465
      58      943    950.617  957.535  942.465
      59      950    950.556  957.535  942.465
      60      938    949.3    957.535  942.465
      61      958    950.17   957.535  942.465
      62      955    950.653  957.535  942.465
      63      947    950.288  957.535  942.465
      64      941    949.359  957.535  942.465
      65      938    948.223  957.535  942.465
      66      945    947.901  957.535  942.465
      67      963    949.411  957.535  942.465
      68      967    951.17   957.535  942.465
      69      969    952.953  957.535  942.465
      70      981    955.757  957.535  942.465
      71      952    955.382  957.535  942.465
      72      931    952.943  957.535  942.465
      73      928    950.449  957.535  942.465
      74      937    949.104  957.535  942.465
      75      950    949.194  957.535  942.465
      76      970    951.274  957.535  942.465
      77      933    949.447  957.535  942.465
      78      960    950.502  957.535  942.465
      79      934    948.852  957.535  942.465
      80      927    946.667  957.535  942.465
plt.plot(z[1:], marker='o', color='r' )
plt.plot(EWMA_UCL[1:], color='b', label='EWMA_UCL')
plt.plot(EWMA_LCL[1:], color='g', label='EWMA_LCL')
plt.axhline(target, color='black', label ='CL')
plt.legend()
plt.title('EWMA Control Chart')
plt.xlabel('Observation')
plt.ylabel('EWMA')
plt.show()

for period, z_, ucl in zip(np.arange(ex_data1['x1'].shape[0] + 1)[1:], z[1:], EWMA_UCL[1:]):
    if z_ > ucl :
        print(f'First "out of control" at period {period}')
        break
First "out of control" at period 8
ex_data1 = pd.read_csv ('30.csv')
def EWMA(data, target: int = None, std : int = None, rate: float = None, width: float = None):

    period = np.reshape(np.arange(data.shape[0]) + 1, (data.shape[0], 1))
    data = np.reshape(np.array(data), (data.shape[0], 1))

    if target is None:
        target = np.mean(data)

    if std is None:
        rbar = []
        for i in range(data.shape[0] - 1):
            rbar.append(abs(data[i] - data[i+1]))

        std = np.mean(rbar) / d2[2]

    z = np.zeros((data.shape[0]+1, 1))
    EWMA_UCL = np.zeros((data.shape[0]+1, 1))
    EWMA_LCL = np.zeros((data.shape[0]+1, 1))

    z[0] = target

    for i in range(1, data.shape[0] + 1):
        z[i] = rate * data[i-1] + (1-rate) * z[i-1]

    for i in range(data.shape[0] + 1):
        EWMA_UCL[i] = target + width * std * np.sqrt(rate/(2-rate) * (1-np.power(1-rate, 2*i)))
        EWMA_LCL[i] = target - width * std * np.sqrt(rate/(2-rate) * (1-np.power(1-rate, 2*i)))

    print(f'Rate = {rate} & Width = {width}')

    print('EWMA Statistics Table')
    tabular_EWMA = np.hstack((period, data, z[1:], EWMA_UCL[1:], EWMA_LCL[1:]))
    print(tabulate(tabular_EWMA, headers = ['Period', 'input', 'Z_value', 'UCL', 'LCL]']))

    return z, EWMA_UCL, EWMA_LCL, target
z, EWMA_UCL, EWMA_LCL, target = EWMA(ex_data1['x1'], rate=0.4, width=3, target=950)
Rate = 0.4 & Width = 3
EWMA Statistics Table
  Period    input    Z_value      UCL     LCL]
--------  -------  ---------  -------  -------
       1      953    951.2    964.597  935.403
       2      945    948.72   967.023  932.977
       3      972    958.032  967.816  932.184
       4      945    952.819  968.093  931.907
       5      975    961.692  968.191  931.809
       6      970    965.015  968.227  931.773
       7      959    962.609  968.24   931.76
       8      973    966.765  968.244  931.756
       9      940    956.059  968.246  931.754
      10      936    948.036  968.246  931.754
      11      985    962.821  968.247  931.753
      12      973    966.893  968.247  931.753
      13      955    962.136  968.247  931.753
      14      950    957.281  968.247  931.753
      15      948    953.569  968.247  931.753
      16      957    954.941  968.247  931.753
      17      940    948.965  968.247  931.753
      18      933    942.579  968.247  931.753
      19      965    951.547  968.247  931.753
      20      973    960.128  968.247  931.753
      21      949    955.677  968.247  931.753
      22      941    949.806  968.247  931.753
      23      966    956.284  968.247  931.753
      24      966    960.17   968.247  931.753
      25      934    949.702  968.247  931.753
      26      937    944.621  968.247  931.753
      27      946    945.173  968.247  931.753
      28      952    947.904  968.247  931.753
      29      935    942.742  968.247  931.753
      30      941    942.045  968.247  931.753
      31      937    940.027  968.247  931.753
      32      946    942.416  968.247  931.753
      33      954    947.05   968.247  931.753
      34      935    942.23   968.247  931.753
      35      941    941.738  968.247  931.753
      36      933    938.243  968.247  931.753
      37      960    946.946  968.247  931.753
      38      968    955.367  968.247  931.753
      39      959    956.82   968.247  931.753
      40      956    956.492  968.247  931.753
      41      959    957.495  968.247  931.753
      42      939    950.097  968.247  931.753
      43      948    949.258  968.247  931.753
      44      958    952.755  968.247  931.753
      45      963    956.853  968.247  931.753
      46      973    963.312  968.247  931.753
      47      949    957.587  968.247  931.753
      48      942    951.352  968.247  931.753
      49      965    956.811  968.247  931.753
      50      962    958.887  968.247  931.753
      51      948    954.532  968.247  931.753
      52      937    947.519  968.247  931.753
      53      955    950.512  968.247  931.753
      54      927    941.107  968.247  931.753
      55      940    940.664  968.247  931.753
      56      962    949.198  968.247  931.753
      57      963    954.719  968.247  931.753
      58      943    950.031  968.247  931.753
      59      950    950.019  968.247  931.753
      60      938    945.211  968.247  931.753
      61      958    950.327  968.247  931.753
      62      955    952.196  968.247  931.753
      63      947    950.118  968.247  931.753
      64      941    946.471  968.247  931.753
      65      938    943.082  968.247  931.753
      66      945    943.849  968.247  931.753
      67      963    951.51   968.247  931.753
      68      967    957.706  968.247  931.753
      69      969    962.223  968.247  931.753
      70      981    969.734  968.247  931.753
      71      952    962.64   968.247  931.753
      72      931    949.984  968.247  931.753
      73      928    941.191  968.247  931.753
      74      937    939.514  968.247  931.753
      75      950    943.709  968.247  931.753
      76      970    954.225  968.247  931.753
      77      933    945.735  968.247  931.753
      78      960    951.441  968.247  931.753
      79      934    944.465  968.247  931.753
      80      927    937.479  968.247  931.753
plt.plot(z[1:], marker='o', color='r' )
plt.plot(EWMA_UCL[1:], color='b', label='EWMA_UCL')
plt.plot(EWMA_LCL[1:], color='g', label='EWMA_LCL')
plt.axhline(target, color='black', label ='CL')
plt.legend()
plt.title('EWMA Control Chart')
plt.xlabel('Observation')
plt.ylabel('EWMA')
plt.show()

for period, z_, ucl in zip(np.arange(ex_data1['x1'].shape[0] + 1)[1:], z[1:], EWMA_UCL[1:]):
    if z_ > ucl :
        print(f'First "out of control" at period {period}')
        break
First "out of control" at period 70
 
 
 
